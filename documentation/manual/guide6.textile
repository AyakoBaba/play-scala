h1. Adding tagging support

As our blog will contain more posts, it will become more and more difficult to retrieve them. To help classify posts by subject we will add tagging support.

h2. <a name="model">The Tag model object</a>

Let’s set-up the database model. Create a new evolution script to update your database schema, @yabe/db/evolutions/4.sql@:

bc. # --- !Ups
CREATE TABLE Tag (
    id bigint(20) NOT NULL AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    PRIMARY KEY (id)
);
# --- !Downs
DROP TABLE Tag;

Reload, and apply the evolution. Now create the corresponding Scala structure for @Tag@ in the same @models.scala@ file you used for @Post@ and @Author@:

bc. case class Tag(
    id: Pk[Long],
    name: String
)
object Tag extends Magic[Tag] {
    def apply(name:String) = new Tag(NotAssigned,name)
}

Because we want something like lazy tag creation we will always get them using the @findOrCreateByName(String name)@ factory method. Let’s add it to the @Tag@ class:

bc. object Tag extends Magic[Tag] {
    def apply(name:String) = new Tag(NotAssigned,name)
    // Search for a tag or create a new one
    def findOrCreateByName(name:String):Tag = {
        val maybeTag = Tag.find("name={pname}").on("pname"->name).first()
        maybeTag.getOrElse{
            Tag.create(Tag(name))
        }
    }
}

We use Anorm to lookup for the Tag by name. The @first()@ function returns an @Option[models.Tag]@ with either a @Tag@ or @None@ if there is no tag for this name. We use @getOrElse@ to either return the @Tag@, if it was found, or to execute the code in the else section. The @create()@ function from Anorm will insert a new @Tag@ into the Database. Because the last expression that is evaluated is the create, it will return the new @Tag@ automatically.

A less-verbose version of this code that is identical could be:

bc. object Tag extends Magic[Tag] {
    def apply(name:String) = new Tag(NotAssigned,name)
    // ... shorter version
    def findOrCreateByName(name:String):Tag =
        Tag.find("name={pname}").on("pname"->name).first().getOrElse(Tag.create(Tag(name)))
}

h2. <a name="tagging">Tagging posts</a>

Now it’s time to link the new @Tag@ model with the @Post@ model. A @Post@ contains many @Tags@ and a @Tag@ can be linked to many @Post@ objects. Let’s add the correct relationship to the @Post@ class.

Create a new evolution script to update your database schema, @yabe/db/evolutions/5.sql@:

bc. --- Downs can be configured before Ups
    
# --- !Downs
DROP TABLE TagsForPosts;
    
# --- !Ups
CREATE TABLE TagsForPosts (
    id bigint(20) NOT NULL AUTO_INCREMENT,
    tag_id bigint(20) DEFAULT NULL,
    post_id bigint(20) DEFAULT NULL,
    PRIMARY KEY (id),
    KEY `FK01` (`tag_id`),
    KEY `FK02` (`post_id`),
    CONSTRAINT `FK01` FOREIGN KEY (`tag_id`) REFERENCES `Tag` (`id`) ON UPDATE CASCADE ON DELETE CASCADE ,
    CONSTRAINT `FK02` FOREIGN KEY (`post_id`) REFERENCES `Post` (`id`) ON UPDATE CASCADE ON DELETE CASCADE
);

Save the new evolution SQL script, reload your web browser and check that the script was applied.

Let’s create a new @TagsForPosts@ case class and its companion object:

bc. case class TagsForPosts(id:Pk[Long],
                            tag_id:Long,
                            post_id:Long)
// ...
object TagsForPosts extends Magic[TagsForPosts] {
    def apply(tag_id:Long,post_id:Long) =
            new TagsForPosts(NotAssigned,tag_id,post_id)
}

Save your code and reload, it should compile.

h2. <a name="helpers">Adding helpers</a>

When you write a web application, try to enrich your domain to ease development. A controller should be as lightweight as possible. For our blog application, we need a method to tag a specific @Post@, and a method that will return the list of tags for a specific @Post@.

Edit the @Post case class@, not the companion object, and add a new function @tagItWith(name: String)@:

bc. // In models.scala in the case class Post
def tagItWith(name:String) = {
    val tag=Tag.findOrCreateByName(name)
    TagsForPosts.link(tag.id(),id())
}

Edit the @TagsForPosts@ object and create a new @link@ function:

bc. object TagsForPosts extends Magic[TagsForPosts] {
    def apply(tag_id:Long,post_id:Long) = new TagsForPosts(NotAssigned,tag_id,post_id)
    
    def link(tag_id:Long,post_id:Long):Option[Long] = {
         for(
            tag <- Tag.find("id={pid}").on("pid"->tag_id).first();
            post <- Post.find("id={pid}").on("pid"->post_id).first();
            maybeExistingTagAndPost = TagsForPosts.find("tag_id={p1} and post_id={p2}")
                                                  .on("p1"->tag_id,"p2"->post_id)
                                                   .first();
            val newKey = {
                maybeExistingTagAndPost match {
                    case Some(_) => maybeExistingTagAndPost.get.id()
                    case None => TagsForPosts.create(TagsForPosts(tag_id,post_id)).id()
                }
            }
        ) yield newKey
    }
}

This code is a little bit more complex. We want to insert a new line in @TagsForPosts@. We need first to check that the specified @tag_id@ and @post_id@ exist. Once we are sure that both objects exist, we can insert a new @TagsForPosts@. But what should we do if there’s already an entry? Well we will just return the @TagsForPosts@ ID and that’s it.

We need also another helper method on the @Post@ object companion. Add this new function to the object:

bc. object Post extends Magic[Post] {
    // ... some other def
    //
    def findTaggedWith(name:String):List[Post] =
        SQL("""
            select * from Post p
            join TagsForPosts tfp on p.id=tfp.post_id
            join Tag t on tfp.tag_id=t.id
            where t.name={name}
        """).on("name"->name).as(Post *)
}

The @findTaggedWith@ method searches for @Post@ instances by @Tag@ name and returns a new List of @Post@ or @Nil@ if nothing was found.

Time for tests. Let’s see if it works. Open @Tests.scala@ and add a new test at the end of the file:

bc.    it should "support Tags" in {
        User.create(User(Id(1), "nmartignole@touilleur-express.fr", "secret1", "Nicolas", false))
        val postJava=Post.create(Post(NotAssigned, "My first post", "Java and Scala: yes it rocks!", new Date, 1))
        val javaTag = Tag.create(Tag("Java"))
        val scalaTag = Tag.create(Tag("Scala"))
        
        Post.findTaggedWith("Java").length should be(0)
        Post.findTaggedWith("Scala").length should be(0)
        
        postJava.tagItWith("Java")
        postJava.tagItWith("Scala")
        Post.findTaggedWith("Java").length should be(1)
        Post.findTaggedWith("Scala").length should be(1)
        
        postJava.tagItWith("A new Tag that does not already exist")
        
        // Should reuse existing TagsForPosts
        postJava.tagItWith("Scala")
        Post.findTaggedWith("Java").length should be(1)
        Post.findTaggedWith("Scala").length should be(1)
        
        // Another post
        val postScala=Post.create(Post(NotAssigned, "A scala post", "Scala only", new Date, 1))
        postScala.tagItWith("Scala")
        Post.findTaggedWith("Scala").length should be(2)
        
        // Let’s see what happens when we delete a Post
        Post.delete("where id={pid}").on("pid" -> postJava.id()).executeUpdate()
        Post.findTaggedWith("Scala").length should be(1)
    }

Reload and check in your browser: it should work.

h2. <a>How to return the list of posts that match a list of tags?</a>

Well, we won’t use it in our blog right now, but what if we wanted to retrieve posts tagged with several tags? It’s a little bit easier than the JPA version, thanks to Scala. The tricky part is that we have to use a @having count@ statement to filter only posts that have exactly **all tags** from the joined view.

bc. def findTaggedWith(tagNames:List[String]):List[Post] = {
    println(tagNames.mkString("','"))
    SQL("select distinct(p.*) from Post p join TagsForPosts tf on p.id=tf.post_id join Tag t on tf.tag_id=t.id where t.name in (" 
            +"'"
            +tagNames.mkString("','")
            +"'"
            +") group by p.id having count(t.id) = {size}").on("size"->tagNames.length).as(Post *)
}

Add a new test in @Tests.scala@. We create a @postScala@ item that is tagged with ‘Scala’. Then we create a new @Post@ tagged as ‘Scala’ and ‘NoSQL’. The @findTaggedWith@ should only return the second post if we look up the ‘Scala’ and ‘NoSQL’ tags: 

bc. it should "retrieves a list of Post for a List of Tags" in {
    User.create(User(Id(1), "nmartignole@touilleur-express.fr", "secret1", "Nicolas", false))
    val postScala=Post.create(Post(NotAssigned, "My SCala post", "Scala  for dummies", new Date, 1))
    postScala.tagItWith("Scala")
    
    // Create a new post, tag it with Scala and SQL
    val post3=Post.create(Post(NotAssigned, "Third post", "A Post about Scala and NoSQL", new Date, 1))
    post3.tagItWith("Scala")
    post3.tagItWith("NoSQL")
    
    Post.findTaggedWith(List("Scala")).length should be(2)
    Post.findTaggedWith(List("NoSQL")).length should be(1)
    Post.findTaggedWith(List("Scala","NoSQL")).length should be(1)
}

h2. <a name="cloud">The Tag cloud</a>

Where we have tags, we need a tag cloud. Let’s add a method to the @Tag@ class to generate the tag cloud:

p(note). To be continued…